#include<stdio.h>
#include<stdlib.h>

#define MAXSIZE 100
typedef int SElemType;

//顺序栈的存储结构
typedef struct
{
	SElemType *base;
	SElemType *top;
	int stacksize;			//可用最大容量
}SqStack;

//初始化
void InitStack(SqStack &S)
{
	S.base = new SElemType[MAXSIZE];
	if (!S.base) exit;	
	S.top = S.base;
	S.stacksize = MAXSIZE;
}

//入栈
int Push(SqStack &S, SElemType e)
{
	if (S.top - S.base == S.stacksize) return 0;	//栈满

	*S.top = e;
	S.top++;
	return 1;
}

//出栈
int Pop(SqStack &S, SElemType &e)
{
	if (S.top == S.base) return 0;    //栈空

	S.top--;
	e = *S.top;
	return 1;
}

//取栈顶元素
SElemType GetTop(SqStack S)
{
	if (S.top != S.base)	 //非栈空时返回
		return *(S.top-1);   //++会改变指针自身值，而-1不会改变
}

//遍历输出栈
void printStack(SqStack S)
{
	printf("栈底：");
	SElemType *p = S.base;
	while (p!=S.top)
	{
		printf("%d ", *p);
		p++;
	}
	printf("\n");
}

int main()
{
	SqStack S;
	int e;
	InitStack(S);
	printf("请输入一个要入栈的元素（-1表示结束）：");
	scanf("%d",&e);
	while (e!=-1)
	{
		Push(S,e);
		printf("请输入一个要入栈的元素（-1表示结束）：");
		scanf("%d", &e);
	}
	printStack(S);
	printf("出栈测试：");
	Pop(S, e);
	printStack(S);

	printf("取栈顶元素测试：");
	e=GetTop(S);
	printf("取出的栈顶元素为：%d\n",e);
}
